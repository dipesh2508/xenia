{"version":3,"sources":["../src/utils/prisma.ts","../src/utils/generateToken.ts","../src/controllers/user.controller.ts","../src/middleware/isUserLoggedIn.ts","../src/routes/user.route.ts","../src/utils/cloudinary.ts","../src/controllers/community.controller.ts","../src/routes/community.route.ts","../src/app.ts","../src/index.ts"],"names":["PrismaClient","jwt","bcrypt","express","cloudinary","CloudinaryStorage","multer","router","dotenv","path","cookieParser","cors"],"mappings":"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","file":"index.js","sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport { prisma, PrismaClient };","import jwt from \"jsonwebtoken\";\nimport { User } from \"@/types\";\nimport { Response } from \"express\";\n\n/**\n * Generates a JWT token and sets it as a cookie in the response\n * \n * @param userId The ID of the user to generate a token for\n * @param res Express response object to set the cookie on\n */\nexport const generateJwtToken = (userId: User[\"id\"], res?: Response): string => {\n  const token = jwt.sign({ id: userId }, process.env.JWT_SECRET!, {\n    expiresIn: '30d',\n  });\n\n  if (res) {\n    res.cookie('token', token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n    });\n  }\n\n  return token;\n};\n","import { Request, Response } from \"express\";\nimport { prisma } from \"@/utils/prisma\";\nimport bcrypt from \"bcrypt\";\nimport { generateJwtToken } from \"@/utils/generateToken\";\n\nexport const userSignup = async (req: Request, res: Response): Promise<void> => {\n  const { name, email, password } = req.body;\n\n  try {\n    if (!name || !email || !password) {\n      res.status(400).json({\n        message: \"Please provide all fields.\",\n      });\n      return;\n    }\n\n    if (password?.length < 6) {\n      res.status(400).json({\n        message: \"Password must be at least 6 characters.\",\n      });\n      return;\n    }\n\n    // Check for existing user first\n    const existingUser = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (existingUser) {\n      res.status(400).json({\n        message: \"User with the provided email already exist.\",\n      });\n      return;\n    }\n\n    const salt = await bcrypt.genSalt(10);\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    const newUser = await prisma.user.create({\n      data: {\n        name,\n        email,\n        password: hashedPassword,\n      },\n      select: {\n        id: true,\n        name: true,\n        email: true\n      }\n    });\n\n    // Generate token first\n    generateJwtToken(newUser.id, res);\n\n    // Then send response\n    res.status(201).json(newUser);\n  } catch (error) {\n    console.error(\"Signup Error:\", error);\n    res.status(500).json({\n      message: \"Internal server error.\",\n    });\n  }\n};\n\nexport const userLogin = async (req: Request, res: Response): Promise<void> => {\n  const { email, password } = req.body;\n\n  try {\n    if (!email || !password) {\n      res.status(400).json({\n        message: \"Please provide all fields.\",\n      });\n      return;\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { email },\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        password: true,\n      },\n    });\n\n    if (!user || !user.password) {\n      res.status(400).json({\n        message: \"Invalid credentials.\",\n      });\n      return;\n    }\n\n    const isMatch = await bcrypt.compare(password, user.password);\n\n    if (!isMatch) {\n      res.status(400).json({\n        message: \"Invalid credentials.\",\n      });\n      return;\n    }\n\n    // Generate token first\n    generateJwtToken(user.id, res);\n\n    // Then send response without password\n    res.status(200).json({\n      id: user.id,\n      name: user.name,\n      email: user.email,\n    });\n  } catch (error) {\n    console.error(\"Login Error:\", error);\n    res.status(500).json({\n      message: \"Internal server error.\",\n    });\n  }\n};\n\nexport const logout = async (req: Request, res: Response): Promise<void> => {\n  try {\n    res.clearCookie(\"token\");\n    res.status(200).json({\n      message: \"Logged out successfully.\",\n    });\n  } catch (error) {\n    console.error(\"Logout Error:\", error);\n    res.status(500).json({\n      message: \"Internal server error.\",\n    });\n  }\n};\n\nexport const checkAuth = async (req: any, res: Response): Promise<void> => {\n  try {\n    res.status(200).json(req.user);\n  } catch (error) {\n    console.error(\"CheckAuth Error:\", error);\n    res.status(500).json({\n      message: \"Internal server error.\",\n    });\n  }\n};\n\nexport const deleteUser = async (req: Request, res: Response): Promise<void> => {\n  const userId = req.params.id;\n\n  try {\n    const deletedUser = await prisma.user.delete({\n      where: {\n        id: userId,\n      },\n    });\n\n    if (!deletedUser) {\n      res.status(404).json({\n        message: \"User not found.\",\n      });\n      return;\n    }\n\n    res.status(200).json({\n      message: \"User deleted successfully.\",\n    });\n  } catch (error) {\n    console.error(\"Delete User Error:\", error);\n    res.status(500).json({\n      message: \"Internal server error.\",\n    });\n  }\n};\n","import { prisma } from \"@/utils/prisma\";\nimport { User } from \"@/types\";\nimport { Request, Response, NextFunction } from \"express\";\nimport jwt from \"jsonwebtoken\";\n\nexport const isLoggedIn = async (\n  req: any,\n  res: Response,\n  next: NextFunction\n): Promise<any> => {\n  const token = req.cookies.token;\n\n  if (!token) {\n    return res.status(401).json({\n      message: \"Unauthorized\",\n    });\n  }\n\n  try {\n    if (!process.env.JWT_SECRET) {\n      throw new Error(\"JWT_SECRET is not defined\");\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET) as {\n      id: User[\"id\"];\n    };\n\n    if (!decoded.id) {\n      return res.status(401).json({\n        message: \"Unauthorized\",\n      });\n    }\n\n    const user = await prisma.user.findUnique({\n      where: {\n        id: decoded.id,\n      },\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        image: true,\n      },\n    });\n\n    if (!user) {\n      return res.status(401).json({\n        message: \"User not found.\",\n      });\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    console.error(\"Authentication Error:\", error);\n    return res.status(401).json({\n      message: \"Authentication failed. Please log in again.\",\n    });\n  }\n};\n","import express from \"express\";\nimport {\n  checkAuth,\n  userLogin,\n  userSignup,\n  logout,\n  deleteUser\n} from \"@/controllers/user.controller\";\nimport { isLoggedIn } from \"@/middleware/isUserLoggedIn\";\n\nconst router = express.Router();\n\nrouter.route(\"/signup\").post(userSignup);\nrouter.route(\"/login\").post(userLogin);\nrouter.route(\"/logout\").post(logout);\nrouter.route(\"/checkAuth\").get(isLoggedIn, checkAuth);\nrouter.route(\"/:id\").delete(isLoggedIn, deleteUser);\n\nexport default router;\n","import { v2 as cloudinary } from 'cloudinary';\nimport { CloudinaryStorage } from 'multer-storage-cloudinary';\nimport multer from 'multer';\n\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\nconst storage = new CloudinaryStorage({\n  cloudinary: cloudinary,\n  params: {\n    folder: 'xenia-communities',\n    allowed_formats: ['jpg', 'jpeg', 'png', 'gif'],\n    transformation: [{ width: 500, height: 500, crop: 'limit' }],\n  } as any\n});\n\nconst uploadMiddleware = multer({ \n  storage: storage,\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB max file size\n  }\n});\n\n// Create an upload object with optional method\nexport const upload = {\n  ...uploadMiddleware,\n  optional: () => ({\n    ...uploadMiddleware,\n    single: (fieldName: string) => (req: any, res: any, next: any) => {\n      if (!req.files && !req.file) {\n        return next();\n      }\n      return uploadMiddleware.single(fieldName)(req, res, next);\n    }\n  })\n};\n\nexport const deleteImage = async (publicId: string) => {\n  try {\n    await cloudinary.uploader.destroy(publicId);\n  } catch (error) {\n    console.error('Error deleting image from Cloudinary:', error);\n  }\n};\n\nexport const getPublicIdFromUrl = (url: string) => {\n  const splits = url.split('/');\n  const filename = splits[splits.length - 1] || '';\n  return `xenia-communities/${filename.split('.')[0]}`;\n};\n","import { Request, Response } from \"express\";\nimport { prisma } from \"@/utils/prisma\";\nimport { deleteImage, getPublicIdFromUrl } from \"@/utils/cloudinary\";\n\nexport const createCommunity = async (req: any, res: Response): Promise<void> => {\n  try {\n    const { name, description } = req.body;\n    const userId = req.user.id;\n    \n    if (!name) {\n      res.status(400).json({ message: \"Community name is required\" });\n      return;\n    }\n\n    if (name.length > 100) {\n      res.status(400).json({ message: \"Community name must be less than 100 characters\" });\n      return;\n    }\n\n    // Check for existing community with same name\n    const existingCommunity = await prisma.community.findFirst({\n      where: { name }\n    });\n\n    if (existingCommunity) {\n      res.status(400).json({ message: \"Community name already exists\" });\n      return;\n    }\n\n    const community = await prisma.community.create({\n      data: {\n        name,\n        description,\n        ...(req.file?.path && { image: req.file.path }),\n        ownerId: userId,\n        members: {\n          create: {\n            userId,\n            role: \"OWNER\"\n          }\n        }\n      }\n    });\n\n    res.status(201).json(community);\n  } catch (error) {\n    console.error(\"Create Community Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const getCommunity = async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { id } = req.params;\n\n    const community = await prisma.community.findUnique({\n      where: { id },\n      include: {\n        owner: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n            image: true\n          }\n        }\n      }\n    });\n\n    if (!community) {\n      res.status(404).json({ message: \"Community not found\" });\n      return;\n    }\n\n    res.status(200).json(community);\n  } catch (error) {\n    console.error(\"Get Community Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const getAllCommunities = async (req: Request, res: Response): Promise<void> => {\n  try {\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 10;\n    const search = req.query.search as string;\n    const skip = (page - 1) * limit;\n\n    const where = search ? {\n      name: {\n        contains: search,\n        mode: 'insensitive' as const\n      }\n    } : {};\n\n    if (req.query.page || req.query.limit || req.query.search) {\n      // Return paginated response when query params are present\n      const [communities, total] = await Promise.all([\n        prisma.community.findMany({\n          where,\n          skip,\n          take: limit,\n          include: {\n            owner: {\n              select: {\n                id: true,\n                name: true,\n                image: true\n              }\n            },\n            _count: {\n              select: {\n                members: true\n              }\n            }\n          }\n        }),\n        prisma.community.count({ where })\n      ]);\n\n      res.status(200).json({\n        communities,\n        total,\n        hasMore: total > skip + limit\n      });\n    } else {\n      // Return all communities when no query params are present\n      const communities = await prisma.community.findMany({\n        include: {\n          owner: {\n            select: {\n              id: true,\n              name: true,\n              image: true\n            }\n          },\n          _count: {\n            select: {\n              members: true\n            }\n          }\n        }\n      });\n\n      res.status(200).json(communities);\n    }\n  } catch (error) {\n    console.error(\"Get All Communities Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const updateCommunity = async (req: any, res: Response): Promise<void> => {\n  try {\n    const { id } = req.params;\n    const { name, description } = req.body;\n    const userId = req.user.id;\n\n    const community = await prisma.community.findUnique({\n      where: { id }\n    });\n\n    if (!community) {\n      res.status(404).json({ message: \"Community not found\" });\n      return;\n    }\n\n    if (community.ownerId !== userId) {\n      res.status(403).json({ message: \"Not authorized to update this community\" });\n      return;\n    }\n\n    if (name) {\n      const existingCommunity = await prisma.community.findFirst({\n        where: {\n          name,\n          id: { not: id }\n        }\n      });\n\n      if (existingCommunity) {\n        res.status(400).json({ message: \"Community name already exists\" });\n        return;\n      }\n    }\n\n    // Only handle image deletion if a new image is being uploaded\n    if (req.file?.path && community.image) {\n      const publicId = getPublicIdFromUrl(community.image);\n      await deleteImage(publicId);\n    }\n\n    const updatedCommunity = await prisma.community.update({\n      where: { id },\n      data: {\n        name,\n        description,\n        ...(req.file?.path && { image: req.file.path })\n      }\n    });\n\n    res.status(200).json(updatedCommunity);\n  } catch (error) {\n    console.error(\"Update Community Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const deleteCommunity = async (req: any, res: Response): Promise<void> => {\n  try {\n    const { id } = req.params;\n    const userId = req.user.id;\n\n    const community = await prisma.community.findUnique({\n      where: { id }\n    });\n\n    if (!community) {\n      res.status(404).json({ message: \"Community not found\" });\n      return;\n    }\n\n    if (community.ownerId !== userId) {\n      res.status(403).json({ message: \"Not authorized to delete this community\" });\n      return;\n    }\n\n    // Delete community image from Cloudinary\n    if (community.image) {\n      const publicId = getPublicIdFromUrl(community.image);\n      await deleteImage(publicId);\n    }\n\n    await prisma.community.delete({\n      where: { id }\n    });\n\n    res.status(200).json({ message: \"Community deleted successfully\" });\n  } catch (error) {\n    console.error(\"Delete Community Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const joinCommunity = async (req: any, res: Response): Promise<void> => {\n  try {\n    const { id } = req.params;\n    const userId = req.user.id;\n\n    const community = await prisma.community.findUnique({\n      where: { id },\n      include: {\n        members: true\n      }\n    });\n\n    if (!community) {\n      res.status(404).json({ message: \"Community not found\" });\n      return;\n    }\n\n    const existingMembership = community.members.find(m => m.userId === userId);\n    if (existingMembership) {\n      res.status(400).json({ message: \"User is already a member of this community\" });\n      return;\n    }\n\n    const membership = await prisma.communitiesOnUsers.create({\n      data: {\n        communityId: id,\n        userId,\n        role: \"MEMBER\"\n      }\n    });\n\n    res.status(200).json(membership);\n  } catch (error) {\n    console.error(\"Join Community Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const leaveCommunity = async (req: any, res: Response): Promise<void> => {\n  try {\n    const { id } = req.params;\n    const userId = req.user.id;\n\n    const community = await prisma.community.findUnique({\n      where: { id },\n      include: {\n        members: true\n      }\n    });\n\n    if (!community) {\n      res.status(404).json({ message: \"Community not found\" });\n      return;\n    }\n\n    if (community.ownerId === userId) {\n      res.status(400).json({ message: \"Owner cannot leave the community\" });\n      return;\n    }\n\n    const membership = community.members.find(m => m.userId === userId);\n    if (!membership) {\n      res.status(400).json({ message: \"User is not a member of this community\" });\n      return;\n    }\n\n    await prisma.communitiesOnUsers.delete({\n      where: {\n        communityId_userId: {\n          communityId: id,\n          userId\n        }\n      }\n    });\n\n    res.status(200).json({ message: \"Left community successfully\" });\n  } catch (error) {\n    console.error(\"Leave Community Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const getCommunityMembers = async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { id } = req.params;\n    \n    if (req.query.page || req.query.limit) {\n      // Paginated response when page/limit is specified\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const skip = (page - 1) * limit;\n\n      const [members, total] = await Promise.all([\n        prisma.communitiesOnUsers.findMany({\n          where: { communityId: id },\n          skip,\n          take: limit,\n          include: {\n            user: {\n              select: {\n                id: true,\n                name: true,\n                email: true,\n                image: true\n              }\n            }\n          }\n        }),\n        prisma.communitiesOnUsers.count({\n          where: { communityId: id }\n        })\n      ]);\n\n      res.status(200).json({\n        members: members.map(member => ({\n          id: member.user.id,\n          name: member.user.name,\n          email: member.user.email,\n          image: member.user.image,\n          role: member.role\n        })),\n        total,\n        hasMore: total > skip + limit\n      });\n    } else {\n      // Simple array response for non-paginated requests (what the test expects)\n      const members = await prisma.communitiesOnUsers.findMany({\n        where: { communityId: id },\n        include: {\n          user: {\n            select: {\n              id: true,\n              name: true,\n              email: true,\n              image: true\n            }\n          }\n        }\n      });\n\n      // Format the response as a flat array of user objects with roles\n      const formattedMembers = members.map(member => ({\n        id: member.user.id,\n        name: member.user.name,\n        email: member.user.email,\n        image: member.user.image,\n        role: member.role\n      }));\n\n      res.status(200).json(formattedMembers);\n    }\n  } catch (error) {\n    console.error(\"Get Community Members Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n","import express from \"express\";\nimport { upload } from \"@/utils/cloudinary\";\nimport {\n  createCommunity,\n  getCommunity,\n  getAllCommunities,\n  updateCommunity,\n  deleteCommunity,\n  joinCommunity,\n  leaveCommunity,\n  getCommunityMembers\n} from \"@/controllers/community.controller\";\nimport { isLoggedIn } from \"@/middleware/isUserLoggedIn\";\n\nconst router = express.Router();\n\nrouter.post(\"/\", isLoggedIn, upload.optional().single('image'), createCommunity);\nrouter.get(\"/\", getAllCommunities);\nrouter.get(\"/:id\", getCommunity);\nrouter.put(\"/:id\", isLoggedIn, upload.optional().single('image'), updateCommunity);\nrouter.delete(\"/:id\", isLoggedIn, deleteCommunity);\nrouter.post(\"/:id/join\", isLoggedIn, joinCommunity);\nrouter.post(\"/:id/leave\", isLoggedIn, leaveCommunity);\nrouter.get(\"/:id/members\", getCommunityMembers);\n\nexport default router;\n","import express, { Request, Response, NextFunction } from \"express\";\nimport cookieParser from \"cookie-parser\";\nimport cors from \"cors\";\nimport userRouter from \"@/routes/user.route\";\nimport communityRouter from \"@/routes/community.route\";\nimport path from \"path\";\nimport dotenv from \"dotenv\";\n\n// Configure dotenv to load .env file\ndotenv.config({ path: path.resolve(process.cwd(), \".env\") });\n\n// Create Express app\nconst app = express();\n\n// Middleware\napp.use(express.json());\napp.use(cookieParser());\napp.use(cors({\n  origin: process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : process.env.FRONTEND_URL,\n  credentials: true\n}));\n\n// Health check route\napp.get(\"/\", (_, res) => {\n  res.send(\"API is running...\");\n});\n\n// Routes\napp.use(\"/api/user\", userRouter);\napp.use(\"/api/communities\", communityRouter);\n\n// Error handler middleware\napp.use((err: Error, req: Request, res: Response, next: NextFunction) => {\n  console.error('Server Error:', err);\n  res.status(500).json({\n    message: \"Internal server error\",\n    error: process.env.NODE_ENV === 'development' ? err.message : undefined\n  });\n});\n\n// Handle 404 errors\napp.use((req: Request, res: Response) => {\n  res.status(404).json({ message: `Route ${req.url} not found` });\n});\n\nexport default app;\n","import dotenv from \"dotenv\";\nimport path from \"path\";\n\n// Configure dotenv to load .env file\ndotenv.config({ path: path.resolve(process.cwd(), \".env\") });\n\nif (!process.env.JWT_SECRET) {\n  console.error(\"Critical environment variable JWT_SECRET is missing!\");\n  console.error(\"Please check your .env file\");\n  process.exit(1);\n}\n\nimport app from \"./app\";\n\nconst port = process.env.PORT || 8000;\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason: Error) => {\n  console.error('Unhandled Rejection:', reason.message);\n});\n"]}