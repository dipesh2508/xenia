{"version":3,"sources":["../src/utils/prisma.ts","../src/utils/generateToken.ts","../src/controllers/user.controller.ts","../src/middleware/isUserLoggedIn.ts","../src/routes/user.route.ts","../src/utils/cloudinary.ts","../src/controllers/community.controller.ts","../src/routes/community.route.ts","../../../packages/database/index.ts","../src/controllers/chat.controller.ts","../src/services/socket.ts","../src/controllers/message.controller.ts","../src/routes/chat.route.ts","../src/app.ts","../src/index.ts"],"names":["PrismaClient","jwt","bcrypt","express","cloudinary","CloudinaryStorage","multer","router","prisma","verify","server","Server","dotenv","path","cookieParser","cors","http"],"mappings":"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","file":"index.js","sourcesContent":["import { PrismaClient } from '@prisma/client';\n\n// Create a singleton instance of PrismaClient\nclass PrismaManager {\n  private static instance: PrismaClient;\n  private static isConnecting: boolean = false;\n  private static reconnectAttempts: number = 0;\n  private static readonly MAX_RECONNECT_ATTEMPTS = 5;\n  private static readonly RECONNECT_INTERVAL = 5000; // 5 seconds\n\n  static getInstance(): PrismaClient {\n    if (!PrismaManager.instance) {\n      console.log('Initializing PrismaClient...');\n      PrismaManager.instance = new PrismaClient({\n        log: process.env.NODE_ENV === 'development' ? ['error', 'warn'] : ['error'],\n        errorFormat: 'pretty'\n      });\n\n      // Add middleware for connection error handling\n      PrismaManager.instance.$use(async (params, next) => {\n        try {\n          return await next(params);\n        } catch (error: any) {\n          // Check if it's a connection error\n          if (\n            error.message.includes('Can\\'t reach database server') ||\n            error.message.includes('Connection refused') ||\n            error.message.includes('Connection lost') ||\n            error.message.includes('ECONNREFUSED')\n          ) {\n            console.error(`Database connection error: ${error.message}`);\n            \n            // Only attempt reconnection if we're not already trying\n            if (!PrismaManager.isConnecting) {\n              PrismaManager.attemptReconnection();\n            }\n          }\n          \n          throw error;\n        }\n      });\n\n      // Connect on initialization\n      PrismaManager.connect();\n    }\n    \n    return PrismaManager.instance;\n  }\n\n  private static async connect() {\n    try {\n      await PrismaManager.instance.$connect();\n      console.log('Database connection established successfully');\n      PrismaManager.reconnectAttempts = 0;\n    } catch (error) {\n      console.error('Failed to connect to the database:', error);\n      PrismaManager.attemptReconnection();\n    }\n  }\n\n  private static attemptReconnection() {\n    if (PrismaManager.reconnectAttempts >= PrismaManager.MAX_RECONNECT_ATTEMPTS) {\n      console.error(`Maximum reconnection attempts (${PrismaManager.MAX_RECONNECT_ATTEMPTS}) reached. Giving up.`);\n      return;\n    }\n\n    PrismaManager.isConnecting = true;\n    PrismaManager.reconnectAttempts++;\n    \n    console.log(`Attempting to reconnect to database (attempt ${PrismaManager.reconnectAttempts} of ${PrismaManager.MAX_RECONNECT_ATTEMPTS})...`);\n    \n    setTimeout(async () => {\n      try {\n        await PrismaManager.instance.$disconnect();\n        await PrismaManager.instance.$connect();\n        console.log('Successfully reconnected to the database');\n        PrismaManager.isConnecting = false;\n        PrismaManager.reconnectAttempts = 0;\n      } catch (error) {\n        console.error('Failed to reconnect:', error);\n        PrismaManager.isConnecting = false;\n        PrismaManager.attemptReconnection();\n      }\n    }, PrismaManager.RECONNECT_INTERVAL);\n  }\n\n  static async disconnect() {\n    if (PrismaManager.instance) {\n      await PrismaManager.instance.$disconnect();\n      console.log('Database connection closed');\n    }\n  }\n}\n\n// Create a single instance to export\nconst prisma = PrismaManager.getInstance();\n\n// Export the health check function for the database\nexport const checkDatabaseConnection = async (): Promise<boolean> => {\n  try {\n    // Simple query to check if the database is responsive\n    await prisma.$queryRaw`SELECT 1`;\n    return true;\n  } catch (error) {\n    console.error('Database health check failed:', error);\n    return false;\n  }\n};\n\nexport { prisma, PrismaClient };","import jwt from \"jsonwebtoken\";\nimport { User } from \"@/types\";\nimport { Response } from \"express\";\n\n/**\n * Generates a JWT token and sets it as a cookie in the response\n * \n * @param userId The ID of the user to generate a token for\n * @param res Express response object to set the cookie on\n */\nexport const generateJwtToken = (userId: User[\"id\"], res?: Response): string => {\n  const token = jwt.sign({ id: userId }, process.env.JWT_SECRET!, {\n    expiresIn: '30d',\n  });\n\n  if (res) {\n    res.cookie('token', token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n    });\n  }\n\n  return token;\n};\n","import { Request, Response } from \"express\";\nimport { prisma } from \"@/utils/prisma\";\nimport bcrypt from \"bcrypt\";\nimport { generateJwtToken } from \"@/utils/generateToken\";\n\nexport const userSignup = async (req: Request, res: Response): Promise<void> => {\n  const { name, email, password } = req.body;\n\n  try {\n    if (!name || !email || !password) {\n      res.status(400).json({\n        message: \"Please provide all fields.\",\n      });\n      return;\n    }\n\n    if (password?.length < 6) {\n      res.status(400).json({\n        message: \"Password must be at least 6 characters.\",\n      });\n      return;\n    }\n\n    // Check for existing user first\n    const existingUser = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (existingUser) {\n      res.status(400).json({\n        message: \"User with the provided email already exist.\",\n      });\n      return;\n    }\n\n    const salt = await bcrypt.genSalt(10);\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    const newUser = await prisma.user.create({\n      data: {\n        name,\n        email,\n        password: hashedPassword,\n      },\n      select: {\n        id: true,\n        name: true,\n        email: true\n      }\n    });\n\n    // Updated cookie settings\n    const token = generateJwtToken(newUser.id);\n    res.cookie(\"token\", token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: process.env.NODE_ENV === \"production\" ? \"none\" : \"lax\",\n      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n      path: \"/\"\n    });\n\n    res.status(201).json(newUser);\n  } catch (error) {\n    console.error(\"Signup Error:\", error);\n    res.status(500).json({\n      message: \"Internal server error.\",\n    });\n  }\n};\n\nexport const userLogin = async (req: Request, res: Response): Promise<void> => {\n  const { email, password } = req.body;\n\n  try {\n    if (!email || !password) {\n      res.status(400).json({\n        message: \"Please provide all fields.\",\n      });\n      return;\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { email },\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        password: true,\n      },\n    });\n\n    if (!user || !user.password) {\n      res.status(400).json({\n        message: \"Invalid credentials.\",\n      });\n      return;\n    }\n\n    const isMatch = await bcrypt.compare(password, user.password);\n\n    if (!isMatch) {\n      res.status(400).json({\n        message: \"Invalid credentials.\",\n      });\n      return;\n    }\n\n    // Generate token first\n    const token = generateJwtToken(user.id);\n    res.cookie(\"token\", token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: process.env.NODE_ENV === \"production\" ? \"none\" : \"lax\",\n      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n      path: \"/\"\n    });\n\n    // Then send response without password\n    res.status(200).json({\n      id: user.id,\n      name: user.name,\n      email: user.email,\n    });\n  } catch (error) {\n    console.error(\"Login Error:\", error);\n    res.status(500).json({\n      message: \"Internal server error.\",\n    });\n  }\n};\n\nexport const logout = async (req: Request, res: Response): Promise<void> => {\n  try {\n    res.clearCookie(\"token\", {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: process.env.NODE_ENV === \"production\" ? \"none\" : \"lax\",\n      path: \"/\"\n    });\n    res.status(200).json({\n      message: \"Logged out successfully.\",\n    });\n  } catch (error) {\n    console.error(\"Logout Error:\", error);\n    res.status(500).json({\n      message: \"Internal server error.\",\n    });\n  }\n};\n\nexport const checkAuth = async (req: any, res: Response): Promise<void> => {\n  try {\n    res.status(200).json(req.user);\n  } catch (error) {\n    console.error(\"CheckAuth Error:\", error);\n    res.status(500).json({\n      message: \"Internal server error.\",\n    });\n  }\n};\n\nexport const deleteUser = async (req: Request, res: Response): Promise<void> => {\n  const userId = req.params.id;\n\n  try {\n    const deletedUser = await prisma.user.delete({\n      where: {\n        id: userId,\n      },\n    });\n\n    if (!deletedUser) {\n      res.status(404).json({\n        message: \"User not found.\",\n      });\n      return;\n    }\n\n    res.status(200).json({\n      message: \"User deleted successfully.\",\n    });\n  } catch (error) {\n    console.error(\"Delete User Error:\", error);\n    res.status(500).json({\n      message: \"Internal server error.\",\n    });\n  }\n};\n","import { prisma } from \"@/utils/prisma\";\nimport { User } from \"@/types\";\nimport { Request, Response, NextFunction } from \"express\";\nimport jwt from \"jsonwebtoken\";\n\nexport const isLoggedIn = async (\n  req: any,\n  res: Response,\n  next: NextFunction\n): Promise<any> => {\n  const token = req.cookies.token;\n\n  if (!token) {\n    console.error(\"No token found in cookies\");\n    return res.status(401).json({\n      message: \"Unauthorized\",\n    });\n  }\n\n  try {\n    if (!process.env.JWT_SECRET) {\n      console.error(\"Critical environment variable JWT_SECRET is missing!\");\n      throw new Error(\"JWT_SECRET is not defined\");\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET) as {\n      id: User[\"id\"];\n    };\n\n    if (!decoded.id) {\n      console.error(\"Decoded id is missing from token\");\n      return res.status(401).json({\n        message: \"Unauthorized\",\n      });\n    }\n\n    try {\n      const user = await prisma.user.findUnique({\n        where: {\n          id: decoded.id,\n        },\n        select: {\n          id: true,\n          name: true,\n          email: true,\n          image: true,\n        },\n      });\n\n      if (!user) {\n        console.error(\"User not found in database\");\n        return res.status(401).json({\n          message: \"User not found.\",\n        });\n      }\n\n      req.user = user;\n      next();\n    } catch (dbError) {\n      console.error(\"Database error during authentication:\", dbError);\n      return res.status(503).json({\n        message: \"Service temporarily unavailable. Please try again later.\",\n      });\n    }\n  } catch (error) {\n    console.error(\"Authentication Error:\", error);\n    return res.status(401).json({\n      message: \"Authentication failed. Please log in again.\",\n    });\n  }\n};\n","import express from \"express\";\nimport {\n  checkAuth,\n  userLogin,\n  userSignup,\n  logout,\n  deleteUser\n} from \"@/controllers/user.controller\";\nimport { isLoggedIn } from \"@/middleware/isUserLoggedIn\";\n\nconst router = express.Router();\n\nrouter.route(\"/signup\").post(userSignup);\nrouter.route(\"/login\").post(userLogin);\nrouter.route(\"/logout\").post(logout);\nrouter.route(\"/checkAuth\").get(isLoggedIn, checkAuth);\nrouter.route(\"/:id\").delete(isLoggedIn, deleteUser);\n\nexport default router;\n","import { v2 as cloudinary } from 'cloudinary';\nimport { CloudinaryStorage } from 'multer-storage-cloudinary';\nimport multer from 'multer';\n\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\nconst storage = new CloudinaryStorage({\n  cloudinary: cloudinary,\n  params: {\n    folder: 'xenia-communities',\n    allowed_formats: ['jpg', 'jpeg', 'png', 'gif'],\n    transformation: [{ width: 500, height: 500, crop: 'limit' }],\n  } as any\n});\n\nconst uploadMiddleware = multer({ \n  storage: storage,\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB max file size\n  }\n});\n\n// Create an upload object with optional method\nexport const upload = {\n  ...uploadMiddleware,\n  optional: () => ({\n    ...uploadMiddleware,\n    single: (fieldName: string) => (req: any, res: any, next: any) => {\n      if (!req.files && !req.file) {\n        return next();\n      }\n      return uploadMiddleware.single(fieldName)(req, res, next);\n    }\n  })\n};\n\nexport const deleteImage = async (publicId: string) => {\n  try {\n    await cloudinary.uploader.destroy(publicId);\n  } catch (error) {\n    console.error('Error deleting image from Cloudinary:', error);\n  }\n};\n\nexport const getPublicIdFromUrl = (url: string) => {\n  const splits = url.split('/');\n  const filename = splits[splits.length - 1] || '';\n  return `xenia-communities/${filename.split('.')[0]}`;\n};\n","import { Request, Response } from \"express\";\nimport { prisma } from \"@/utils/prisma\";\nimport { deleteImage, getPublicIdFromUrl } from \"@/utils/cloudinary\";\n\nexport const createCommunity = async (\n  req: any,\n  res: Response\n): Promise<void> => {\n  try {\n    const { name, description } = req.body;\n    const userId = req.user.id;\n\n    if (!name) {\n      res.status(400).json({ message: \"Community name is required\" });\n      return;\n    }\n\n    if (name.length > 100) {\n      res\n        .status(400)\n        .json({ message: \"Community name must be less than 100 characters\" });\n      return;\n    }\n\n    // Check for existing community with same name\n    const existingCommunity = await prisma.community.findFirst({\n      where: { name },\n    });\n\n    if (existingCommunity) {\n      res.status(400).json({ message: \"Community name already exists\" });\n      return;\n    }\n\n    // Create community and automatically create a chat room for it\n    const community = await prisma.$transaction(async (tx) => {\n      // Create the community\n      const newCommunity = await tx.community.create({\n        data: {\n          name,\n          description,\n          ...(req.file?.path && { image: req.file.path }),\n          ownerId: userId,\n          members: {\n            create: {\n              userId,\n              role: \"OWNER\",\n            },\n          },\n        },\n      });\n\n      // Create a default chat room for the community\n      await tx.chat.create({\n        data: {\n          communityId: newCommunity.id,\n        },\n      });\n\n      return newCommunity;\n    });\n\n    res.status(201).json(community);\n  } catch (error) {\n    console.error(\"Create Community Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const getCommunity = async (\n  req: Request,\n  res: Response\n): Promise<void> => {\n  try {\n    const { id } = req.params;\n\n    const community = await prisma.community.findUnique({\n      where: { id },\n      include: {\n        owner: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n            image: true,\n          },\n        },\n        chats: {\n          include: {\n            _count: {\n              select: {\n                messages: true\n              }\n            },\n            messages: {\n              take: 20,\n              orderBy: {\n                createdAt: \"desc\",\n              },\n              include: {\n                sender: {\n                  select: {\n                    id: true,\n                    name: true,\n                  },\n                },\n              },\n            },\n          },\n        },\n      }\n    });\n\n    if (!community) {\n      res.status(404).json({ message: \"Community not found\" });\n      return;\n    }\n\n    res.status(200).json(community);\n  } catch (error) {\n    console.error(\"Get Community Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const getAllCommunities = async (\n  req: Request,\n  res: Response\n): Promise<void> => {\n  try {\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 10;\n    const search = req.query.search as string;\n    const skip = (page - 1) * limit;\n\n    const where = search\n      ? {\n          name: {\n            contains: search,\n            mode: \"insensitive\" as const,\n          },\n        }\n      : {};\n\n    if (req.query.page || req.query.limit || req.query.search) {\n      // Return paginated response when query params are present\n      const [communities, total] = await Promise.all([\n        prisma.community.findMany({\n          where,\n          skip,\n          take: limit,\n          include: {\n            owner: {\n              select: {\n                id: true,\n                name: true,\n                image: true,\n              },\n            },\n            _count: {\n              select: {\n                members: true,\n              },\n            },\n          },\n        }),\n        prisma.community.count({ where }),\n      ]);\n\n      res.status(200).json({\n        communities,\n        total,\n        hasMore: total > skip + limit,\n      });\n    } else {\n      // Return all communities when no query params are present\n      const communities = await prisma.community.findMany({\n        include: {\n          owner: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n          _count: {\n            select: {\n              members: true,\n            },\n          },\n        },\n      });\n\n      res.status(200).json(communities);\n    }\n  } catch (error) {\n    console.error(\"Get All Communities Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const updateCommunity = async (\n  req: any,\n  res: Response\n): Promise<void> => {\n  try {\n    const { id } = req.params;\n    const { name, description } = req.body;\n    const userId = req.user.id;\n\n    const community = await prisma.community.findUnique({\n      where: { id },\n    });\n\n    if (!community) {\n      res.status(404).json({ message: \"Community not found\" });\n      return;\n    }\n\n    if (community.ownerId !== userId) {\n      res\n        .status(403)\n        .json({ message: \"Not authorized to update this community\" });\n      return;\n    }\n\n    if (name) {\n      const existingCommunity = await prisma.community.findFirst({\n        where: {\n          name,\n          id: { not: id },\n        },\n      });\n\n      if (existingCommunity) {\n        res.status(400).json({ message: \"Community name already exists\" });\n        return;\n      }\n    }\n\n    // Only handle image deletion if a new image is being uploaded\n    if (req.file?.path && community.image) {\n      const publicId = getPublicIdFromUrl(community.image);\n      await deleteImage(publicId);\n    }\n\n    const updatedCommunity = await prisma.community.update({\n      where: { id },\n      data: {\n        name,\n        description,\n        ...(req.file?.path && { image: req.file.path }),\n      },\n    });\n\n    res.status(200).json(updatedCommunity);\n  } catch (error) {\n    console.error(\"Update Community Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const deleteCommunity = async (\n  req: any,\n  res: Response\n): Promise<void> => {\n  try {\n    const { id } = req.params;\n    const userId = req.user.id;\n\n    const community = await prisma.community.findUnique({\n      where: { id },\n    });\n\n    if (!community) {\n      res.status(404).json({ message: \"Community not found\" });\n      return;\n    }\n\n    if (community.ownerId !== userId) {\n      res\n        .status(403)\n        .json({ message: \"Not authorized to delete this community\" });\n      return;\n    }\n\n    // Delete community image from Cloudinary\n    if (community.image) {\n      const publicId = getPublicIdFromUrl(community.image);\n      await deleteImage(publicId);\n    }\n\n    await prisma.community.delete({\n      where: { id },\n    });\n\n    res.status(200).json({ message: \"Community deleted successfully\" });\n  } catch (error) {\n    console.error(\"Delete Community Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const joinCommunity = async (req: any, res: Response): Promise<void> => {\n  try {\n    const { id } = req.params;\n    const userId = req.user.id;\n\n    const community = await prisma.community.findUnique({\n      where: { id },\n      include: {\n        members: true,\n      },\n    });\n\n    if (!community) {\n      res.status(404).json({ message: \"Community not found\" });\n      return;\n    }\n\n    const existingMembership = community.members.find(\n      (m) => m.userId === userId\n    );\n    if (existingMembership) {\n      res\n        .status(400)\n        .json({ message: \"User is already a member of this community\" });\n      return;\n    }\n\n    const membership = await prisma.communitiesOnUsers.create({\n      data: {\n        communityId: id,\n        userId,\n        role: \"MEMBER\",\n      },\n    });\n\n    res.status(200).json(membership);\n  } catch (error) {\n    console.error(\"Join Community Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const leaveCommunity = async (\n  req: any,\n  res: Response\n): Promise<void> => {\n  try {\n    const { id } = req.params;\n    const userId = req.user.id;\n\n    const community = await prisma.community.findUnique({\n      where: { id },\n      include: {\n        members: true,\n      },\n    });\n\n    if (!community) {\n      res.status(404).json({ message: \"Community not found\" });\n      return;\n    }\n\n    if (community.ownerId === userId) {\n      res.status(400).json({ message: \"Owner cannot leave the community\" });\n      return;\n    }\n\n    const membership = community.members.find((m) => m.userId === userId);\n    if (!membership) {\n      res\n        .status(400)\n        .json({ message: \"User is not a member of this community\" });\n      return;\n    }\n\n    await prisma.communitiesOnUsers.delete({\n      where: {\n        communityId_userId: {\n          communityId: id,\n          userId,\n        },\n      },\n    });\n\n    res.status(200).json({ message: \"Left community successfully\" });\n  } catch (error) {\n    console.error(\"Leave Community Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const getCommunityMembers = async (\n  req: Request,\n  res: Response\n): Promise<void> => {\n  try {\n    const { id } = req.params;\n\n    if (req.query.page || req.query.limit) {\n      // Paginated response when page/limit is specified\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const skip = (page - 1) * limit;\n\n      const [members, total] = await Promise.all([\n        prisma.communitiesOnUsers.findMany({\n          where: { communityId: id },\n          skip,\n          take: limit,\n          include: {\n            user: {\n              select: {\n                id: true,\n                name: true,\n                email: true,\n                image: true,\n              },\n            },\n          },\n        }),\n        prisma.communitiesOnUsers.count({\n          where: { communityId: id },\n        }),\n      ]);\n\n      res.status(200).json({\n        members: members.map((member) => ({\n          id: member.user.id,\n          name: member.user.name,\n          email: member.user.email,\n          image: member.user.image,\n          role: member.role,\n        })),\n        total,\n        hasMore: total > skip + limit,\n      });\n    } else {\n      // Simple array response for non-paginated requests (what the test expects)\n      const members = await prisma.communitiesOnUsers.findMany({\n        where: { communityId: id },\n        include: {\n          user: {\n            select: {\n              id: true,\n              name: true,\n              email: true,\n              image: true,\n            },\n          },\n        },\n      });\n\n      // Format the response as a flat array of user objects with roles\n      const formattedMembers = members.map((member) => ({\n        id: member.user.id,\n        name: member.user.name,\n        email: member.user.email,\n        image: member.user.image,\n        role: member.role,\n      }));\n\n      res.status(200).json(formattedMembers);\n    }\n  } catch (error) {\n    console.error(\"Get Community Members Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const getUserCommunities = async (\n  req: any,\n  res: Response\n): Promise<void> => {\n  try {\n    const userId = req.user.id;\n\n    if (!userId) {\n      res.status(401).json({ message: \"Unauthorized\" });\n      return;\n    }\n    const communities = await prisma.communitiesOnUsers.findMany({\n      where: { userId },\n      include: {\n        community: {\n          include: {\n            _count: {\n              select: {\n                members: true,\n              },\n            },\n            chats: {\n              include: {\n                messages: {\n                  take: 1,\n                  orderBy: {\n                    createdAt: \"desc\",\n                  },\n                  include: {\n                    sender: {\n                      select: {\n                        id: true,\n                        name: true,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n\n    res.status(200).json(communities);\n  } catch (error) {\n    console.error(\"Get User Communities Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n","import express from \"express\";\nimport { upload } from \"@/utils/cloudinary\";\nimport {\n  createCommunity,\n  getCommunity,\n  getAllCommunities,\n  updateCommunity,\n  deleteCommunity,\n  joinCommunity,\n  leaveCommunity,\n  getCommunityMembers,\n  getUserCommunities\n} from \"@/controllers/community.controller\";\nimport { isLoggedIn } from \"@/middleware/isUserLoggedIn\";\n\nconst router = express.Router();\n\nrouter.post(\"/\", isLoggedIn, upload.optional().single('image'), createCommunity);\nrouter.get(\"/\", getAllCommunities);\nrouter.get(\"/user\", isLoggedIn, getUserCommunities);\nrouter.get(\"/:id\", getCommunity);\nrouter.put(\"/:id\", isLoggedIn, upload.optional().single('image'), updateCommunity);\nrouter.delete(\"/:id\", isLoggedIn, deleteCommunity);\nrouter.post(\"/:id/join\", isLoggedIn, joinCommunity);\nrouter.post(\"/:id/leave\", isLoggedIn, leaveCommunity);\nrouter.get(\"/:id/members\", getCommunityMembers);\n\nexport default router;\n","import { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport { prisma, PrismaClient };","import { Request, Response } from \"express\";\nimport { prisma } from \"@repo/database\";\n\n// Create a new chat room in a community\nexport const createChat = async (req: any, res: Response): Promise<void> => {\n  try {\n    const { communityId } = req.body;\n    const userId = req.user.id;\n\n    if (!communityId) {\n      res.status(400).json({ message: \"Community ID is required\" });\n      return;\n    }\n\n    // Check if community exists\n    const community = await prisma.community.findUnique({\n      where: { id: communityId },\n      include: {\n        members: {\n          where: { userId }\n        }\n      }\n    });\n\n    if (!community) {\n      res.status(404).json({ message: \"Community not found\" });\n      return;\n    }\n\n    // Ensure user is a member of the community\n    if (community.members.length === 0) {\n      res.status(403).json({ message: \"You must be a member of the community to create a chat\" });\n      return;\n    }\n\n    // Create chat room\n    const newChat = await prisma.chat.create({\n      data: {\n        communityId\n      }\n    });\n\n    res.status(201).json(newChat);\n  } catch (error) {\n    console.error(\"Create Chat Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\n// Get all chat rooms for a community\nexport const getCommunityChats = async (req: any, res: Response): Promise<void> => {\n  try {\n    const { communityId } = req.params;\n    const userId = req.user.id;\n\n    // Verify community exists\n    const community = await prisma.community.findUnique({\n      where: { id: communityId },\n      include: {\n        members: {\n          where: { userId }\n        }\n      }\n    });\n\n    if (!community) {\n      res.status(404).json({ message: \"Community not found\" });\n      return;\n    }\n\n    // Check if user is a member of the community\n    const isMember = community.members.length > 0 || community.ownerId === userId;\n    if (!isMember) {\n      res.status(403).json({ message: \"You must be a member of the community to view chats\" });\n      return;\n    }\n\n    const chats = await prisma.chat.findMany({\n      where: {\n        communityId\n      },\n      orderBy: {\n        updatedAt: \"desc\"\n      },\n      include: {\n        _count: {\n          select: {\n            messages: true\n          }\n        }\n      }\n    });\n\n    res.status(200).json(chats);\n  } catch (error) {\n    console.error(\"Get Community Chats Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\n// Get a specific chat room by ID\nexport const getChatById = async (req: any, res: Response): Promise<void> => {\n  try {\n    const { chatId } = req.params;\n    const userId = req.user.id;\n\n    const chat = await prisma.chat.findUnique({\n      where: {\n        id: chatId\n      },\n      include: {\n        community: {\n          include: {\n            members: {\n              where: { userId }\n            }\n          }\n        },\n        messages: {\n          include: {\n            sender: {\n              select: {\n                id: true,\n                name: true,\n                image: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"asc\"\n          }\n        }\n      }\n    });\n\n    if (!chat) {\n      res.status(404).json({ message: \"Chat room not found\" });\n      return;\n    }\n\n    // Check if user is a member of the community\n    const isMember = chat.community.members.length > 0 || chat.community.ownerId === userId;\n    if (!isMember) {\n      res.status(403).json({ message: \"You must be a member of the community to view this chat\" });\n      return;\n    }\n\n    res.status(200).json(chat);\n  } catch (error) {\n    console.error(\"Get Chat Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\n// Delete a chat room\nexport const deleteChat = async (req: any, res: Response): Promise<void> => {\n  try {\n    const { chatId } = req.params;\n    const userId = req.user.id;\n\n    const chat = await prisma.chat.findUnique({\n      where: { id: chatId },\n      include: {\n        community: true\n      }\n    });\n\n    if (!chat) {\n      res.status(404).json({ message: \"Chat room not found\" });\n      return;\n    }\n\n    // Only community owner or admin can delete chats\n    const userRole = await prisma.communitiesOnUsers.findUnique({\n      where: {\n        communityId_userId: {\n          communityId: chat.communityId,\n          userId\n        }\n      }\n    });\n\n    if (chat.community.ownerId !== userId && (!userRole || userRole.role !== \"ADMIN\")) {\n      res.status(403).json({ message: \"Not authorized to delete this chat room\" });\n      return;\n    }\n\n    // Delete the chat\n    await prisma.chat.delete({\n      where: { id: chatId }\n    });\n\n    res.status(200).json({ message: \"Chat room deleted successfully\" });\n  } catch (error) {\n    console.error(\"Delete Chat Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n","import { Server as HttpServer } from 'http';\nimport { Server, Socket } from 'socket.io';\nimport { verify } from 'jsonwebtoken';\nimport { prisma } from '@/utils/prisma';\n\nlet io: Server;\n\n// Socket middleware to authenticate connections\nconst authenticateSocket = async (socket: Socket, next: (err?: Error) => void) => {\n  try {\n    // Get cookies from handshake\n    const cookies = socket.handshake.headers.cookie;\n    if (!cookies) {\n      return next(new Error('Authentication failed: No cookies provided'));\n    }\n    \n    // Parse cookies to get the JWT token\n    const cookieArray = cookies.split(';').map(cookie => cookie.trim());\n    const tokenCookie = cookieArray.find(cookie => cookie.startsWith('token='));\n    \n    if (!tokenCookie) {\n      return next(new Error('Authentication failed: No token cookie'));\n    }\n    \n    const token = tokenCookie.split('=')[1];\n    \n    // Check if JWT_SECRET exists\n    if (!process.env.JWT_SECRET) {\n      return next(new Error('JWT_SECRET is not configured'));\n    }\n\n    if(!token) {\n      return next(new Error('Authentication failed: No token provided'));\n    }\n    \n    // Verify the token\n    const decoded = verify(token, process.env.JWT_SECRET) as unknown as { id: string };\n    \n    if (!decoded || !decoded.id) {\n      return next(new Error('Authentication failed: Invalid token'));\n    }\n    \n    // Find the user\n    const user = await prisma.user.findUnique({\n      where: { id: decoded.id }\n    });\n    \n    if (!user) {\n      return next(new Error('Authentication failed: User not found'));\n    }\n    \n    // Attach user to socket for later use\n    (socket as any).user = user;\n    next();\n  } catch (error) {\n    console.error('Socket authentication error:', error);\n    next(new Error('Authentication failed'));\n  }\n};\n\nexport const initSocketServer = (server: HttpServer): void => {\n  // Ensure io isn't already initialized\n  if (io) {\n    console.warn('Socket.IO server already initialized');\n    return;\n  }\n\n  io = new Server(server, {\n    cors: {\n      origin: process.env.FRONTEND_URL || 'http://localhost:3000',\n      methods: ['GET', 'POST'],\n      credentials: true\n    },\n    path: '/socket.io/',\n    transports: ['websocket', 'polling'],\n    // Increase ping timeout to prevent premature disconnections\n    pingTimeout: 60000\n  });\n\n  // Apply authentication middleware\n  io.use(authenticateSocket);\n\n  io.on('connection', (socket: Socket) => {\n    console.log(`User connected: ${(socket as any).user?.id}`);\n    \n    // Join a specific chat room\n    socket.on('joinRoom', (roomId: string) => {\n      socket.join(roomId);\n      console.log(`User ${(socket as any).user?.id} joined room ${roomId}`);\n    });\n    \n    // Leave a specific chat room\n    socket.on('leaveRoom', (roomId: string) => {\n      socket.leave(roomId);\n      console.log(`User ${(socket as any).user?.id} left room ${roomId}`);\n    });\n    \n    // Handle disconnection\n    socket.on('disconnect', () => {\n      console.log(`User disconnected: ${(socket as any).user?.id}`);\n    });\n  });\n\n  console.log('Socket.IO server initialized successfully');\n};\n\n// Function to get the io instance\nexport const getIO = (): Server => {\n  if (!io) {\n    throw new Error('Socket.IO has not been initialized. Please call initSocketServer first.');\n  }\n  return io;\n};\n\n// Export the socket server\nexport { io };\n","import { Request, Response } from \"express\";\nimport { prisma } from \"@repo/database\";\nimport { io } from \"@/services/socket\";\n\nexport const createMessage = async (req: any, res: Response): Promise<void> => {\n  try {\n    const { content, chatId } = req.body;\n    const userId = req.user.id;\n\n    if (!content || !chatId) {\n      res.status(400).json({ message: \"Content and chat ID are required\" });\n      return;\n    }\n\n    // Verify the chat exists\n    const chat = await prisma.chat.findUnique({\n      where: { id: chatId },\n      include: { community: { include: { members: true } } }\n    });\n\n    if (!chat) {\n      res.status(404).json({ message: \"Chat not found\" });\n      return;\n    }\n\n    // Verify user is a member of the community\n    const isMember = chat.community.members.some(member => member.userId === userId);\n    if (!isMember) {\n      res.status(403).json({ message: \"You are not a member of this community\" });\n      return;\n    }\n\n    // Create the message\n    const message = await prisma.message.create({\n      data: {\n        content,\n        senderId: userId,\n        chatId,\n        communityId: chat.communityId\n      },\n      include: {\n        sender: {\n          select: {\n            id: true,\n            name: true,\n            image: true\n          }\n        }\n      }\n    });\n\n    // Emit the new message to all clients in the chat room\n    io.to(chatId).emit(\"newMessage\", message);\n\n    res.status(201).json(message);\n  } catch (error) {\n    console.error(\"Create Message Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const getMessagesByChat = async (req: any, res: Response): Promise<void> => {\n  try {\n    const { chatId } = req.params;\n    const userId = req.user.id;\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 20;\n    const skip = (page - 1) * limit;\n\n    // Verify the chat exists and user has access\n    const chat = await prisma.chat.findUnique({\n      where: { id: chatId },\n      include: { community: { include: { members: true } } }\n    });\n\n    if (!chat) {\n      res.status(404).json({ message: \"Chat not found\" });\n      return;\n    }\n\n    const isMember = chat.community.members.some(member => member.userId === userId);\n    if (!isMember) {\n      res.status(403).json({ message: \"You are not a member of this community\" });\n      return;\n    }\n\n    // Get total count of messages\n    const total = await prisma.message.count({\n      where: { chatId }\n    });\n\n    // Get messages with pagination (most recent first)\n    const messages = await prisma.message.findMany({\n      where: { chatId },\n      orderBy: { createdAt: 'desc' },\n      skip,\n      take: limit,\n      include: {\n        sender: {\n          select: {\n            id: true,\n            name: true,\n            image: true\n          }\n        }\n      }\n    });\n\n    res.status(200).json({\n      messages,\n      total,\n      hasMore: total > skip + limit,\n      page,\n      limit\n    });\n  } catch (error) {\n    console.error(\"Get Messages Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const updateMessage = async (req: any, res: Response): Promise<void> => {\n  try {\n    const { id } = req.params;\n    const { content } = req.body;\n    const userId = req.user.id;\n\n    if (!content) {\n      res.status(400).json({ message: \"Content is required\" });\n      return;\n    }\n\n    // Find the message\n    const message = await prisma.message.findUnique({\n      where: { id },\n      include: { chat: true }\n    });\n\n    if (!message) {\n      res.status(404).json({ message: \"Message not found\" });\n      return;\n    }\n\n    // Verify the user is the sender\n    if (message.senderId !== userId) {\n      res.status(403).json({ message: \"You can only edit your own messages\" });\n      return;\n    }\n\n    // Update the message\n    const updatedMessage = await prisma.message.update({\n      where: { id },\n      data: { content },\n      include: {\n        sender: {\n          select: {\n            id: true,\n            name: true,\n            image: true\n          }\n        }\n      }\n    });\n\n    // Emit the updated message to all clients in the chat room\n    if (message.chatId) {\n      io.to(message.chatId).emit(\"messageUpdated\", updatedMessage);\n    }\n\n    res.status(200).json(updatedMessage);\n  } catch (error) {\n    console.error(\"Update Message Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const deleteMessage = async (req: any, res: Response): Promise<void> => {\n  try {\n    const { id } = req.params;\n    const userId = req.user.id;\n\n    // Find the message\n    const message = await prisma.message.findUnique({\n      where: { id },\n      include: { chat: true }\n    });\n\n    if (!message) {\n      res.status(404).json({ message: \"Message not found\" });\n      return;\n    }\n\n    // Verify the user is the sender\n    if (message.senderId !== userId) {\n      res.status(403).json({ message: \"You can only delete your own messages\" });\n      return;\n    }\n\n    // Save the chatId before deleting\n    const chatId = message.chatId;\n\n    // Delete the message\n    await prisma.message.delete({\n      where: { id }\n    });\n\n    // Emit deletion event to all clients in the chat room\n    if (chatId) {\n      io.to(chatId).emit(\"messageDeleted\", { id });\n    }\n\n    res.status(200).json({ message: \"Message deleted successfully\" });\n  } catch (error) {\n    console.error(\"Delete Message Error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n","import express from \"express\";\nimport { \n  createChat,\n  getCommunityChats,\n  getChatById,\n  deleteChat\n} from \"@/controllers/chat.controller\";\nimport {\n  createMessage,\n  getMessagesByChat,\n  updateMessage,\n  deleteMessage\n} from \"@/controllers/message.controller\";\nimport { isLoggedIn } from \"@/middleware/isUserLoggedIn\";\n\nconst router = express.Router();\n\n// Chat room routes with authentication\nrouter.post(\"/\", isLoggedIn, createChat);\nrouter.get(\"/community/:communityId\", isLoggedIn, getCommunityChats);\nrouter.get(\"/:chatId\", isLoggedIn, getChatById);\nrouter.delete(\"/:chatId\", isLoggedIn, deleteChat);\n\n// Message routes with authentication\nrouter.post(\"/messages\", isLoggedIn, createMessage);\nrouter.get(\"/:chatId/messages\", isLoggedIn, getMessagesByChat);\nrouter.patch(\"/messages/:id\", isLoggedIn, updateMessage);\nrouter.delete(\"/messages/:id\", isLoggedIn, deleteMessage);\n\nexport default router;\n","import express, { Request, Response, NextFunction } from \"express\";\nimport cookieParser from \"cookie-parser\";\nimport cors from \"cors\";\nimport userRouter from \"@/routes/user.route\";\nimport communityRouter from \"@/routes/community.route\";\nimport chatRouter from \"@/routes/chat.route\";\nimport path from \"path\";\nimport dotenv from \"dotenv\";\n\n// Configure dotenv to load .env file\ndotenv.config({ path: path.resolve(process.cwd(), \".env\") });\n\n// Create Express app\nconst app = express();\n\n// Middleware\napp.use(express.json());\napp.use(cookieParser());\napp.use(cors({\n  origin: process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : process.env.FRONTEND_URL,\n  credentials: true\n}));\n\n// Health check route\napp.get(\"/\", (_, res) => {\n  res.send(\"API is running...\");\n});\n\n// Routes\napp.use(\"/api/user\", userRouter);\napp.use(\"/api/communities\", communityRouter);\napp.use(\"/api/chats\", chatRouter);\n\n// Error handler middleware\napp.use((err: Error, req: Request, res: Response, next: NextFunction) => {\n  console.error('Server Error:', err);\n  res.status(500).json({\n    message: \"Internal server error\",\n    error: process.env.NODE_ENV === 'development' ? err.message : undefined\n  });\n});\n\n// Handle 404 errors\napp.use((req: Request, res: Response) => {\n  res.status(404).json({ message: `Route ${req.url} not found` });\n});\n\nexport default app;\n","import dotenv from \"dotenv\";\nimport path from \"path\";\nimport http from \"http\";\nimport app from \"./app\";\nimport { initSocketServer } from \"./services/socket\";\nimport { prisma, checkDatabaseConnection } from \"./utils/prisma\";\n\n// Configure dotenv to load .env file\ndotenv.config({ path: path.resolve(process.cwd(), \".env\") });\n\nif (!process.env.JWT_SECRET) {\n  console.error(\"Critical environment variable JWT_SECRET is missing!\");\n  console.error(\"Please check your .env file\");\n  process.exit(1);\n}\n\nconst PORT = parseInt(process.env.PORT || \"8000\", 10);\n\n// Create HTTP server\nconst server = http.createServer(app);\n\n// Initialize Socket.IO with the server\ninitSocketServer(server);\n\n// Perform initial database connection check with retry\nconst MAX_RETRIES = 5;\nconst RETRY_INTERVAL = 5000;\n\nconst connectWithRetry = async (retryCount = 0): Promise<void> => {\n  try {\n    const isConnected = await checkDatabaseConnection();\n    if (isConnected) {\n      console.log('Database connection successful');\n      // Start the server only after successful DB connection\n      server.listen(PORT, () => {\n        console.log(`Server running on port ${PORT}`);\n        console.log(`Socket.IO server running alongside HTTP server`);\n      });\n    } else {\n      throw new Error('Database connection check failed');\n    }\n  } catch (error) {\n    console.error(`Database connection attempt ${retryCount + 1} failed:`, error);\n    if (retryCount < MAX_RETRIES) {\n      console.log(`Retrying in ${RETRY_INTERVAL/1000} seconds...`);\n      setTimeout(() => connectWithRetry(retryCount + 1), RETRY_INTERVAL);\n    } else {\n      console.error('Max connection attempts reached. Starting server in offline mode...');\n      server.listen(PORT, () => {\n        console.log(`Server running on port ${PORT} (Database unavailable)`);\n      });\n    }\n  }\n};\n\n// Start connection process\nconnectWithRetry();\n\n// Handle graceful shutdown\nconst gracefulShutdown = async () => {\n  console.log('Shutting down gracefully...');\n  \n  // Close the HTTP server first\n  server.close(() => {\n    console.log('HTTP server closed.');\n    \n    // Then disconnect from the database\n    prisma.$disconnect()\n      .then(() => {\n        console.log('Database connection closed.');\n        process.exit(0);\n      })\n      .catch(error => {\n        console.error('Error during database disconnection:', error);\n        process.exit(1);\n      });\n  });\n  \n  // If server hasn't closed within 10 seconds, force shutdown\n  setTimeout(() => {\n    console.error('Could not close connections in time, forcefully shutting down');\n    process.exit(1);\n  }, 10000);\n};\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason: Error) => {\n  console.error('Unhandled Rejection:', reason.message);\n});\n\n// Listen for termination signals\nprocess.on('SIGTERM', gracefulShutdown);\nprocess.on('SIGINT', gracefulShutdown);\n"]}